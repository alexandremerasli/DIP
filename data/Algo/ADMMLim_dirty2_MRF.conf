##
## The Markov Random Field (MRF) penalty is implemented for several types
## of neighborhood, potential functions, similarity and proximity factors.
## Available parameters are given below.
## The MRF penalty has the following expression:
## penalty = beta * sum_on_voxels * sum_on_neighborhood
##         * proximity_factor * similarity_factor * potential_function
## Note that the penalty strength (beta) is common to all penalty types so
## its value is provided within the command line with option -pnlt-beta.
##
## Important note about this configuration file: if multiple uses of a same
## keyword, only the first is considered. This means that this configuration
## file used as is would result in a neighborhood defined by the 6 nearest
## voxels, no proximity nor similarity factors, and a quadratic penalty. For
## different settings, unwanted options have to be commented.
##


###
###  N E I G H B O R H O O D
###

# The neighborhood shape is defined using the 'neighborhood shape' keyword
# with one of the following settings: '6-nearest', 'box' or 'sphere'.

# Simply the 6-nearest neighbors (4 in 2D)
neighborhood shape: 6-nearest

# Box neighborhood with the side of the box defined as '2*order+1'. Corner
# voxels can also be excluded as in some papers. The following example will
# lead to a box of 3x3x3 voxels where the 8 corners are removed, leading to
# 3x3x3-8-1=18 neighbors (as in Schramm et al, IEEE TMI vol 37 pp 590 2018).
neighborhood shape: box
box neighborhood order: 1
exclude box neighborhood corners: 1

# Spherical neighborhood with the radius provided in mm
neighborhood shape: sphere
sphere neighborhood radius (mm): 6


##
##  P R O X I M I T Y   F A C T O R S
##

# The proximity factors are used to weight the contribution of each neighbor
# to the global penalty, based on proximity to the voxel of interest. These
# factors are always normalized so that their sum is 1. They can be set using
# the 'proximity factor' keyword with one of the following setting.

# Uniform (no) proximity factors
proximity factor: none

##
##  S I M I L A R I T Y   F A C T O R S
##

# The similarity factors are used to weight the contribution of each neighbor
# to the global penalty, based on similarity to the voxel of interest. These
# factors are not normalized by default. They can be set using the 'similarity
# factor' keyword based on one of the following setting.

# Uniform (no) similarity factors
similarity factor: none

##
##  P O T E N T I A L   F U N C T I O N
##


# The potential function actually penalizes the difference between the voxel of
# interest and a neighbor. It can be set using the 'potential function' keyword
# based on one of the following setting.

# The classical quadratic penalty: p(u,v) = 0.5*(u-v)^2
# Reference: Geman and Geman, IEEE Trans. Pattern Anal. Machine Intell., vol. PAMI-6,
# pp. 721-741, 1984.
potential function: quadratic

